package main

import (
	"flag"
	"fmt"
	"go/parser"
	"go/token"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
)

const url = "https://data.iana.org/TLD/tlds-alpha-by-domain.txt"

// fetchTLDs retrieves the list of TLDs from the IANA URL.
// It returns a comment from the first line (if it starts with '#') and a slice of strings containing the TLDs.
func fetchTLDs() (string, []string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return "", nil, err
	}
	defer resp.Body.Close()

	// Ensure the response status is 200 OK.
	if resp.StatusCode != http.StatusOK {
		return "", nil, fmt.Errorf("unexpected HTTP status: %s", resp.Status)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", nil, err
	}

	lines := strings.Split(string(body), "\n")
	if len(lines) == 0 {
		return "", nil, fmt.Errorf("no data found")
	}

	// Check if the first line starts with '#'.
	if !strings.HasPrefix(lines[0], "#") {
		return "", nil, fmt.Errorf("first line does not start with '#'")
	}

	comment := strings.TrimSpace(lines[0][1:]) // Extract everything after '#'.

	if len(lines) > 1 {
		return comment, lines[1:], nil
	}
	return comment, nil, fmt.Errorf("no TLD data found after the comment line")
}

// getPackageName reads the first Go file in the current directory and extracts its package name.
// It returns the package name as a string.
func getPackageName() (string, error) {
	files, err := os.ReadDir(".")
	if err != nil {
		return "", err
	}

	// Iterate over files in the directory to find the first Go file.
	for _, file := range files {
		if strings.HasSuffix(file.Name(), ".go") {
			fset := token.NewFileSet()
			node, err := parser.ParseFile(fset, file.Name(), nil, parser.PackageClauseOnly)
			if err != nil {
				return "", err
			}
			return node.Name.Name, nil
		}
	}
	return "", fmt.Errorf("no Go files found in the current directory")
}

func main() {
	// Parse the command-line flags, specifically the '-o' flag for output file location.
	outputFile := flag.String("o", "tlds.go", "Output file location")
	flag.Parse()

	// Fetch the TLDs from the IANA URL.
	comment, tlds, err := fetchTLDs()
	if err != nil {
		log.Fatalf("Error fetching TLDs: %v", err)
	}

	// Extract the package name from the first Go file in the current directory.
	packageName, err := getPackageName()
	if err != nil {
		log.Fatalf("Error getting package name: %v", err)
	}

	// Construct the content for the output Go file.
	content := fmt.Sprintf("// Code generated by running \"go generate\". DO NOT EDIT.\n// %s\n\npackage %s\n\n// TLDs is an array of valid Top Level Domains\nvar TLDs = []string{\n", comment, packageName)
	for _, tld := range tlds {
		if tld != "" {
			content += fmt.Sprintf("\t\"%s\",\n", tld)
		}
	}
	content += "}\n"

	// Write the content to the specified output file.
	err = ioutil.WriteFile(*outputFile, []byte(content), 0644)
	if err != nil {
		log.Fatalf("Error writing to file: %v", err)
	}
}
